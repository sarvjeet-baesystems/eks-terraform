output cluster_endpoint {
  description = "Endpoint for EKS control plane."
  value       = module.eks.cluster_endpoint
}

output cluster_security_group_id {
  description = "Security group ids attached to the cluster control plane."
  value       = module.eks.cluster_security_group_id
}

output cluster_cert {
  value = module.eks.cluster_certificate_authority_data
}

output kubectl_config {
  description = "kubectl config as generated by the module."
  value       = module.eks.kubeconfig
  sensitive   = true
}

output region {
  description = "AWS region in which resources are created"
  value       = var.region
}

output main_cidr {
  description = "Cluster main CIDR"
  value       = var.main_cidr
}

output awscli_obtain_kubeconfig_command {
  value = "# Ensure to asume this role to be in the proper account scope: ${var.aws_account_id}\naws eks update-kubeconfig --region '${var.region}' --name '${var.cluster_name}' "
}

output private_zone_domain {
  description = "Internal DNS Zone/DOMAIN for this cluster"
  value       = aws_route53_zone.private.name
}

output private_dns_server_ip {
  description = "Ip address of AWS DNS server on the VPC"
  value       = local.private_dns_server_ip
}

output web_ca_cert_file_path {
  description = "Web CA certificate path if VPN endpoint is on"
  value       = var.enable_vpn_endpoint ? abspath(local_file.root_ca_cert.0.filename) : "NA: set 'enable_vpn_endpoint' variable to enable"
}

output web_cert_file_path {
  description = "Web certificate path if VPN endpoint is on"
  value       = var.enable_vpn_endpoint ? abspath(local_file.web_cert.0.filename) : "NA: set 'enable_vpn_endpoint' variable to enable"
}

output web_cert_key_file_path {
  description = "Web certificate key path if VPN endpoint is on"
  value       = var.enable_vpn_endpoint ? abspath(local_file.web_key.0.filename) : "NA: set 'enable_vpn_endpoint' variable to enable"
}
